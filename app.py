import streamlit as st
from dotenv import load_dotenv
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled
import google.generativeai as genai
import os
import requests
import tempfile
from fpdf import FPDF
import unicodedata
from urllib.parse import urlparse, parse_qs
import re

# Load environment variables
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# App Config
st.set_page_config(page_title="YouTube Summarizer", layout="centered")
st.markdown("<h2 style='text-align:center; color:#4CAF50;'>üé• YouTube Video Summarizer</h2>", unsafe_allow_html=True)

# Extract Video ID from any valid YouTube URL
def get_video_id(url):
    try:
        parsed_url = urlparse(url)
        if parsed_url.hostname in ["www.youtube.com", "youtube.com", "m.youtube.com"]:
            query = parse_qs(parsed_url.query)
            return query.get("v", [None])[0]
        elif parsed_url.hostname in ["youtu.be"]:
            return parsed_url.path.lstrip("/")
        elif "embed" in parsed_url.path:
            return parsed_url.path.split("/")[-1]
        elif "shorts" in parsed_url.path:
            return parsed_url.path.split("/")[-1]
        match = re.search(r"(?:v=|\/)([0-9A-Za-z_-]{11})", url)
        if match:
            return match.group(1)
    except:
        return None

# Fetch Transcript
def get_transcript(video_id):
    try:
        return YouTubeTranscriptApi.get_transcript(video_id)
    except TranscriptsDisabled:
        try:
            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
            transcript = transcript_list.find_transcript(['en'])
            return transcript.fetch()
        except:
            return None
    except:
        return None

def extract_text(transcript_data):
    return " ".join([entry["text"] for entry in transcript_data]) if transcript_data else None

def make_prompt(transcript_text):
    return f"""You are a helpful assistant that summarizes YouTube videos. 
Summarize the transcript below into key points in under 900 words:

{transcript_text}
"""

def find_suitable_gemini_model():
    preferred = ["gemini-1.5-flash", "gemini-1.5-pro", "gemini-pro"]
    try:
        available_models = [
            m.name for m in genai.list_models()
            if "generateContent" in m.supported_generation_methods
        ]
        for preferred_model in preferred:
            for available in available_models:
                if preferred_model in available:
                    return available
        return available_models[0] if available_models else None
    except Exception as e:
        st.error(f"Model lookup failed: {e}")
        return None

def generate_summary(text):
    model_name = find_suitable_gemini_model()
    if not model_name:
        return None
    model = genai.GenerativeModel(model_name)
    try:
        response = model.generate_content(make_prompt(text))
        return response.text
    except Exception as e:
        st.error(f"Failed to summarize: {e}")
        return None

# Text Cleaner
def clean_text(text):
    replacements = {
        "‚Äú": '"', "‚Äù": '"', "‚Äò": "'", "‚Äô": "'",
        "‚Äì": "-", "‚Äî": "-", "‚Ä¶": "...",
        "‚Ä¢": "-", "‚Üí": "->", "‚Üê": "<-"
    }
    for old, new in replacements.items():
        text = text.replace(old, new)
    text = unicodedata.normalize("NFKD", text)
    return text.encode("latin-1", "replace").decode("latin-1")

# Styled PDF Class
class StyledPDF(FPDF):
    def header(self):
        if os.path.exists("logo.png"):
            self.image("logo.png", 10, 8, 15)
        self.set_font("Helvetica", 'B', 16)
        self.set_text_color(0, 102, 204)
        self.cell(0, 10, "NoteTube - YouTube Summary", ln=True, align="C")
        self.ln(8)
        self.set_draw_color(200, 200, 200)
        self.line(10, self.get_y(), 200, self.get_y())
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font("Helvetica", "I", 9)
        self.set_text_color(150, 150, 150)
        self.cell(0, 10, f"Page {self.page_no()}  |  Generated by NoteTube", 0, 0, "C")

    def add_summary(self, summary_text):
        self.set_font("Times", size=12)
        self.set_text_color(33, 33, 33)
        self.set_left_margin(20)
        self.set_right_margin(20)

        lines = summary_text.replace("*", "").split("\n")
        for line in lines:
            clean_line = clean_text(line.strip())
            if clean_line:
                self.multi_cell(0, 8, clean_line)
                self.ln(2)

def generate_styled_pdf(summary_text):
    pdf = StyledPDF()
    pdf.set_auto_page_break(auto=True, margin=20)
    pdf.add_page()
    pdf.add_summary(summary_text)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
        pdf.output(tmp_file.name)
        return tmp_file.name

# Video Metadata
def fetch_video_info(video_id):
    API_KEY = os.getenv("YOUTUBE_API_KEY")
    url = f"https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics,contentDetails&id={video_id}&key={API_KEY}"
    res = requests.get(url).json()
    try:
        item = res["items"][0]
        title = item["snippet"]["title"]
        channel = item["snippet"]["channelTitle"]
        views = item["statistics"]["viewCount"]
        date = item["snippet"]["publishedAt"]
        return title, channel, views, date
    except:
        return None, None, None, None

# UI Input
youtube_link = st.text_input("üîó Enter YouTube Link", placeholder="https://www.youtube.com/watch?v=VIDEO_ID")

summary = None
video_id = get_video_id(youtube_link) if youtube_link else None

if video_id:
    st.image(f"http://img.youtube.com/vi/{video_id}/0.jpg", caption="üìå Video Thumbnail", use_container_width=True)
    title, channel, views, date = fetch_video_info(video_id)
    if title:
        st.markdown(f"**üé¨ Title:** {title}")
        st.markdown(f"**üì∫ Channel:** {channel}")
        st.markdown(f"**üëÅÔ∏è Views:** {int(views):,}")
        st.markdown(f"**üìÖ Published:** {date[:10]}")

# Generate Summary Button
if st.button("üìù Generate Notes"):
    if not video_id:
        st.error("Invalid YouTube link.")
    else:
        with st.spinner("üîÑ Summarizing..."):
            transcript_data = get_transcript(video_id)
            transcript_text = extract_text(transcript_data)
            if transcript_text:
                summary = generate_summary(transcript_text)
                if summary:
                    st.session_state["summary_text"] = summary
                    st.success("‚úÖ Summary Generated!")
                    st.markdown("### üìÑ Summary Output")
                    st.write(summary)
                else:
                    st.error("‚ö†Ô∏è Failed to generate summary.")
            else:
                st.error("‚ùå Transcript not available.")

# PDF Download Only
if "summary_text" in st.session_state:
    st.markdown("---")
    st.markdown("### üì• Download Summary as PDF")

    pdf_path = generate_styled_pdf(st.session_state["summary_text"])
    with open(pdf_path, "rb") as pdf_file:
        st.download_button(
            label="üìÑ Download PDF",
            data=pdf_file,
            file_name=f"summary_{video_id}.pdf",
            mime="application/pdf"
        )

# Footer
st.markdown("""
<hr>
<div style='text-align: center; color: gray; font-size: 0.9em;'>
    Made with ‚ù§Ô∏è by <b>Anindya Maity</b> | Powered by <i>Google Gemini & Streamlit</i>
</div>
""", unsafe_allow_html=True)
